#
# LLVM Common Support.
#
#

#%include %{_configdir}/checks.cfg

#
# The package description.
#
Name:      rtems-llvm-%{llvm_version}-%{_host}-%{release}
Summary:   LLVM v%{llvm_version} on host %{_host}
Version:   %{llvm_version}
Release:   %{release}
URL: 	   http://llvm.org/

#
# LLVM Download URL.
#
%define llvm_url https://codeload.github.com/CTSRD-CHERI/llvm-project/tar.gz/%{llvm_version}

%source set llvm --rsb-file=llvm-project-%{llvm_version}.tar.gz %{llvm_url}
%hash sha512 llvm-project-%{llvm_version}.tar.gz Wu7/dU09NKnw1hkEyBiC3xqGYT3tpn6mQoXmfJ2v6qFw56wfuEyew9kr369jU2Q/dYD4e8m3u/W8UlCjcsesQw==

#
# Prepare the source code.
#
%prep
  # save the build top directory and cd back to it rather than
  # using 'cd ..' because some shells change $PWD to a symlink's
  # target location and 'cd ..' fails.
  build_top=$(pwd)

  llvm_source=%{?llvm_external:%{llvm_expand_name}}%{!?llvm_external:"llvm-%{llvm_version}"}

  # llvm is a collection of separate packages, download them and then create
  # the source tree.

  source_dir_llvm=${llvm_source}

  %source setup llvm -q -E
  %{__mv} llvm-project-%{llvm_version} ${source_dir_llvm}

  %patch setup llvm -p1

  cd ${build_top}

%build
  build_top=$(pwd)

  # SWIG will be built and installed into %{swig_prefix} if defined
  # so add it as a path.
  %if %{defined swig_prefix}
    export PATH=%{swig_prefix}/bin:$PATH
  %endif

  %{build_directory}

  mkdir -p ${build_dir}
  cd ${build_dir}

  %{__cmake} -Wno-dev \
    -GNinja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_COLOR_MAKEFILE=OFF \
    -DLLVM_PARALLEL_LINK_JOBS=4 \
    -DLLVM_CCACHE_BUILD=OFF \
    -DPYTHON_EXECUTABLE=/usr/bin/python3 \
    -DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
    -DLLVM_ENABLE_OCAMLDOC=OFF \
    -DLLVM_ENABLE_BINDINGS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_INCLUDE_DOCS=OFF \
    -DLLVM_INCLUDE_BENCHMARKS=OFF \
    -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
    -DCLANG_ENABLE_ARCMT=OFF \
    -DCLANG_ANALYZER_ENABLE_Z3_SOLVER=OFF \
    -DLLVM_TOOL_LLVM_MCA_BUILD=OFF \
    -DLLVM_TOOL_LLVM_EXEGESIS_BUILD=OFF \
    -DLLVM_TOOL_LLVM_RC_BUILD=OFF \
    -DLLVM_OPTIMIZED_TABLEGEN=OFF \
    -DLLVM_USE_SPLIT_DWARF=ON \
    -DLLVM_ENABLE_ASSERTIONS=ON \
    '-DLLVM_LIT_ARGS=--max-time 3600 --timeout 300 -s -vv' \
    '-DLLVM_TARGETS_TO_BUILD=AArch64;ARM;Mips;RISCV;X86;host' \
    '-DLLVM_ENABLE_PROJECTS=llvm;clang;lld' \
    -DCMAKE_INSTALL_PREFIX=%{_prefix} \
    ../${source_dir_llvm}/llvm


  nice ninja all -j8

  cd ${build_top}

%install
  build_top=$(pwd)

  cd ${build_dir}
  nice ninja install
  cd ${build_top}
